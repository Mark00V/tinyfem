self.region_parameters = {'0': {'coordinates': [(0.0, 0.0), (1.0, 0.0), (1.0, 1.0), (0.0, 1.0), (0.0, 0.0)], 'area_neg_pos': 'Positive', 'material': {'k': 1, 'c': 0, 'rho': 0}}, '1': {'coordinates': [(0.0, 1.0), (1.0, 1.0), (1.0, 2.0), (0.0, 2.0), (0.0, 1.0)], 'area_neg_pos': 'Positive', 'material': {'k': 2, 'c': 0, 'rho': 0}}}
self.boundary_parameters = {'0': {'coordinates': [(0.0, 0.0), (1.0, 0.0)], 'bc': {'type': 'Dirichlet', 'value': 1.0}}, '1': {'coordinates': [(1.0, 0.0), (1.0, 1.0)], 'bc': {'type': None, 'value': None}}, '2': {'coordinates': [(1.0, 1.0), (0.0, 1.0)], 'bc': {'type': None, 'value': None}}, '3': {'coordinates': [(0.0, 1.0), (0.0, 0.0)], 'bc': {'type': None, 'value': None}}, '4': {'coordinates': [(1.0, 1.0), (1.0, 2.0)], 'bc': {'type': None, 'value': None}}, '5': {'coordinates': [(1.0, 2.0), (0.0, 2.0)], 'bc': {'type': 'Dirichlet', 'value': 6.0}}, '6': {'coordinates': [(0.0, 2.0), (0.0, 1.0)], 'bc': {'type': None, 'value': None}}}
self.node_parameters = {'0': {'coordinates': (0.0, 0.0), 'bc': {'type': None, 'value': None}}, '1': {'coordinates': (1.0, 0.0), 'bc': {'type': None, 'value': None}}, '2': {'coordinates': (1.0, 1.0), 'bc': {'type': None, 'value': None}}, '3': {'coordinates': (0.0, 1.0), 'bc': {'type': None, 'value': None}}, '4': {'coordinates': (1.0, 2.0), 'bc': {'type': None, 'value': None}}, '5': {'coordinates': (0.0, 2.0), 'bc': {'type': None, 'value': None}}}
self.calculation_parameters = {'mesh_density': 1, 'freq': None, 'equation': 'HE'}
self.nodes_mesh_gen = np.array([np.array([0.5, 0.5]), np.array([0., 0.]), np.array([0.5, 0. ]), np.array([1., 0.]), np.array([1. , 0.5]), np.array([1., 1.]), np.array([0.5, 1. ]), np.array([0., 1.]), np.array([0. , 0.5]), np.array([0.5, 1.5]), np.array([1. , 1.5]), np.array([1., 2.]), np.array([0.5, 2. ]), np.array([0., 2.]), np.array([0. , 1.5])])
self.single_nodes_dict = {'0': 1, '1': 3, '2': 5, '3': 7, '4': 11, '5': 13}
self.boundary_nodes_dict = {'0': [[1, np.array([0., 0.])], [2, np.array([0.5, 0. ])], [3, np.array([1., 0.])]], '1': [[3, np.array([1., 0.])], [4, np.array([1. , 0.5])], [5, np.array([1., 1.])]], '2': [[5, np.array([1., 1.])], [6, np.array([0.5, 1. ])], [7, np.array([0., 1.])]], '3': [[7, np.array([0., 1.])], [8, np.array([0. , 0.5])], [1, np.array([0., 0.])]], '4': [[5, np.array([1., 1.])], [10, np.array([1. , 1.5])], [11, np.array([1., 2.])]], '5': [[11, np.array([1., 2.])], [12, np.array([0.5, 2. ])], [13, np.array([0., 2.])]], '6': [[13, np.array([0., 2.])], [14, np.array([0. , 1.5])], [7, np.array([0., 1.])]]}
self.triangulation = np.array([np.array([2., 4., 0.]), np.array([4., 2., 3.]), np.array([4., 6., 0.]), np.array([6., 4., 5.]), np.array([8., 2., 0.]), np.array([2., 8., 1.]), np.array([6., 8., 0.]), np.array([8., 6., 7.]), np.array([ 6., 10.,  9.]), np.array([10.,  6.,  5.]), np.array([10., 12.,  9.]), np.array([12., 10., 11.]), np.array([14.,  6.,  9.]), np.array([ 6., 14.,  7.]), np.array([12., 14.,  9.]), np.array([14., 12., 13.])])
self.triangulation_region_dict = {'0': range(0, 8), '1': range(8, 16)}
